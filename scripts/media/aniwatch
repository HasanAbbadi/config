#!/bin/sh

myFILE="$HOME/.cache/watchlist"

[ ! -f "$myFILE" ] && touch "$myFILE"

myLIST(){
    printf %80s |tr " " "="
    echo -e "\n"
    paste <(paste <(cut -d '|' -f1 $myFILE) <(cut -d'|' -f2 $myFILE) | awk -v FS='\t' '{printf("%-60s %s\n",$1,$2)}' | awk '{sub(/^/, " ", $0)}1') <(cut -d '|' -f4 $myFILE) | awk -v FS='\t' '{printf("%-30s %s\n",$1,$2)}' | awk '{sub(/^/, " ", $0)}1' | sed "0~1 a\ $(printf %40s |tr " " " ") \ "
    printf %80s |tr " " "="
    echo ""
}

watchAnime(){
    if [[ "$1" == "-a" ]] || [[ "$1" == "--all" ]]; then
        Select=`paste <(cat $myFILE | cut -d '|' -f 1 ) <(cut -d '|' -f 2,4 $myFILE | sed 's/^/|/g') | awk -v FS='\t' '{printf("%-45s %s\n",$1,$2)}' | fzy | cut -d '|' -f1 | sed 's/[ \t]*$//'`
    [ -z "$Select" ] && echo "nothing selected." && exit
    else

if [[ -z $1 ]] || [[ "$1" == "--download-dir" ]] || [[ $1 == "--hide-subs" ]] || [[ $1 == "--rewatch" ]]; then

        Select=`paste <(grep -i watching $myFILE | cut -d '|' -f 1 ) <(grep -i watching $myFILE | cut -d '|' -f 2,4 | sed 's/^/|/g') | awk -v FS='\t' '{printf("%-45s %s\n",$1,$2)}' | fzy | cut -d '|' -f1 | sed 's/[ \t]*$//'`
    [ -z "$Select" ] && echo "nothing selected." && exit

    currentEP=$(grep "$Select" $myFILE | cut -d '|' -f 2)
    EP=`expr "$currentEP" + 1 `
    myChoice=$(grep "$Select" $myFILE | cut -d '|' -f 3)

    if [[ $1 == "--hide-subs" ]]; then
	    if [[ ! -f /bin/screenkey ]] ; then
		    echo "You need to install screenkey for this to work." && exit
	    else
	            screenkey -s medium --font-color black --no-sys --opacity 1 -t 1900 &
	    fi
    fi

    if [[ $myChoice == "0" ]]; then
        echo -e "PLEASE REMEMBER WHICH NUMBER YOU WILL SELECT RIGHT NOW!"
        sleep 1s
        if [[ "$1" == "--download-dir" ]]; then
            anime dl "$Select" -e "$EP" -p animesuge --download-dir "$2"
        else
		if [[ $1 == "--rewatch" ]]; then
           	     echo "playing $Select ep num. $currentEP"
       		     anime dl "$Select" -e "$currentEP" -p animesuge --play mpv
		     exit
    		else
           	     echo "playing $Select ep num. $EP"
            	     anime dl "$Select" -e "$EP" -p animesuge --play mpv
        fi
	fi
        echo "what was the anime number that you selected?"
        read NUMBER
        sed -i "s/^$Select.*/$Select|$currentEP|$NUMBER|Watching/" "$myFILE"

    else
            if [[ "$1" == "--download-dir" ]]; then
 		echo "downloading $Select ep num. $EP"
            anime dl "$Select" -e "$EP" -c $myChoice -p animesuge --download-dir "$2"
    else
	    if [[ $1 == "--rewatch" ]]; then
 		echo "playing $Select ep num. $currentEP"
            anime dl "$Select" -e "$currentEP" -c $myChoice -p animesuge --play mpv
	    exit
    else
 		echo "playing $Select ep num. $EP"
            anime dl "$Select" -e "$EP" -c $myChoice -p animesuge --play mpv
            fi
	    fi
    killall screenkey 2>/dev/null
    fi

    echo "mark as watched?"
    read MARK
    [ $MARK == y ] || [ -z $MARK ] &&\
        sed -i "s/^$Select|$currentEP/$Select|$EP/" "$myFILE"\
        && echo "marked ep num. $EP as watched!" \
        || echo "didn't mark ep num. $EP as watched."

else
    if [[ -z $3 ]]; then
        [ -z "$2" ] && echo ""$1"|0|0|watching" >> "$myFILE"\
            || echo ""$1"|"$2"|0|watching" >> "$myFILE"\
            && echo "Added Anime to Watchlist!"
    else
        [ -z "$2" ] && echo ""$1"|0|0|"$3"" >> "$myFILE"\
            || echo ""$1"|"$2"|0|"$3"" >> "$myFILE"\
            && echo "Added Anime to Watchlist!"
    fi
fi
    fi
}

loop(){
    while true; do
    watchAnime
    done
}

mySearch(){
    SEARCH=$@
    URL="http://google.com/search?hl=en&safe=off&q="
    STRING=`echo $SEARCH | sed 's/ /+/g'`
    URI="$URL$STRING"

    lynx -dump $URI > raw.tmp
    sed 's/http/\^http/g' raw.tmp | tr -s "^" "\n" | grep http| sed 's/\ .*//g' > modified.tmp
    rm raw.tmp
    sed '/google.com/d' modified.tmp > urls
    rm modified.tmp

    echo ""
    cat urls
    echo ""
}

mySeason(){
    [ -z "$3" ] | [ -z "$4" ] && echo "usage: $(tput setaf 7)aniwatch $(tput setaf 3)info $(tput setaf 2)[season]$(tput setaf 4) [year]"
    curl "https://myanimelist.net/anime/season/"$4"/"$3"" 2>/dev/null | grep "h2_anime_title" | cut -d '>' -f 3 | cut -d '<' -f 1 | awk '{print NR  " " $s}' | sort -V -k1 -r ;
}

topList(){
    if [[ -z "$3" ]]; then
	echo "usage: $(tput setaf 7)aniwatch $(tput setaf 3) info $(tput setaf 2)anime$(tput setaf 7)/$(tput setaf 4)manga " && exit
    fi
    mySep=$(printf %80s |tr " " "-")
    paste\
        <( (curl "https://myanimelist.net/top$3.php" && curl "https://myanimelist.net/top$3.php?limit=50") 2>/dev/null\
        | grep "hoverinfo_trigger fl-l ml12 mr8" | cut -d '"' -f 4 | cut -d '/' -f 6  | sed 's/_/ /g' | awk '{print NR "]  " $s}'|  sort -V -k1 -r  | sed 's/^/[/g' )\
        \
        <( (curl "https://myanimelist.net/top$3.php" && curl "https://myanimelist.net/top$3.php?limit=50") 2>/dev/null\
        | grep "js-top-ranking-score-col di-ib al" | cut -d ">" -f 6 | cut -d "<" -f 1 | sort -V -k1)\
        \
        | awk -v FS='\t' '{printf("%-75s %s\n",$1,$2)}' | awk '{sub(/^/, " ", $0)}1' | sed "0~1 a\ $mySep \ "
}

helpMe(){
        echo " Usage: aniwatch info <flag> [STRING]

    -h | --help ) displays this help message
    -t | --top ) list of 100 top manga/anime
    -s | --season ) list of anime in any season any year"; }


myanimelist(){
	 if [[ -z "$2" ]]; then
		 echo "what is the name of the anime/manga?" ; exit
	 fi
    # flags
    case "$2" in
        -s | --season ) mySeason "$@" ; exit ;;
        -t | --top ) topList "$@" ; exit ;;
        -h | --help ) helpMe ; exit ;;
    esac

    # bts
    (mySearch ""$@" myanimelist") >/dev/null

    (curl $(cat urls | head -n1 ) | html2text > raw.txt ) 2>/dev/null

    rm urls

    sed -n '/More\ reviews/q;p' raw.txt > page.txt

    rm raw.txt

    myWord="$(cat page.txt | grep 'Synopsis' -A 2 | tail -n1 | cut -d ' ' -f 1-6)"

    # cover photo
    myType=$(grep "Type:" page.txt | cut -d '[' -f 2 | cut -d ']' -f 1)

    if [[ $myType == "Manga" ]]; then
        (curl $(cat page.txt | grep -i "pictures" | cut -d '(' -f 2 | sed 's/)//' | sed 's|^|https://myanimelist.net|g') | html2text > pics) 2>/dev/null
    else
        (curl $(cat page.txt | grep -i "pictures" | cut -d '(' -f 2 | sed 's/)//') | html2text > pics) 2>/dev/null
    fi
    (curl $(cat pics | grep -i "jpg" | cut -d '(' -f 2 | cut -d ' ' -f1 | sed 1d | head -n1) | imv - &) 2>/dev/null


    # output
    echo -e "$(tput setaf 2)---------------------------------------"

    echo -e "Title:$(grep -iF "ALternative Titles" -A 2 page.txt | tail -n2 | sed 's/English://g')"
    echo -e "$(tput setaf 3)\b"

    grep -iF "score:" page.txt | tail -n1
    echo -e "\b"

    grep -iF "ranked:" page.txt | tail -n1
    echo -e "$(tput setaf 2)---------------------------------------"
    echo -e "$(tput setaf 7)\b"

    echo "Synopsis:"
    echo -e "$(tput setaf 7)\b"
    awk -v RS='' "/$myWord/" page.txt

    echo -e "$(tput setaf 2)---------------------------------------"
    echo -e "$(tput setaf 6)"

    grep -iF "information" -A 30 page.txt | grep -iv "produc" | sed -n "/Serialization/q;p" | sed -n "/--/q;p"| sed "s/([^)]*)//g" | sed 1,2d | cat -s
    echo -e "$(tput setaf 2)---------------------------------------"

    rm page.txt
    rm pics
}

importMyList(){
    if [[ $2 == *.gz ]]; then
        my_xml_list=$(echo "$2" | sed 's/.gz//g' )
        gzip -d "$2"
    else
        my_xml_list="$2"
    fi
    list_num=$(grep "my_status" $my_xml_list | wc -l )

    (paste -d '|' <(grep "series_title" $my_xml_list | cut -d '[' -f 3 | cut -d ']' -f1) <(grep "my_watched_episodes" $my_xml_list | cut -d '>' -f2 | cut -d '<' -f 1) <( for i in $(seq 1 $list_num);do echo 0; done ) <(grep "my_status" $my_xml_list | cut -d '>' -f2 | cut -d '<' -f 1)) >> $myFILE && echo "Imported Successfully!"

    }

myHelp(){
    MOVE_UP=`tput cuu 1` ; CLEAR_LINE=`tput el 1` ; BOLD=`tput bold` ; UNDERLINE=`tput smul` ; RESET=`tput sgr0`

    echo -e "\n    -----------------------------------------------------------------------
   |  AniWatch: A script to watch your favourite anime from your terminal. |\n\
   |                                                                       |\n\
   |  Made by: HasanAbbadi, github: www.github.com/HasanAbbadi             |\n\
    -----------------------------------------------------------------------\n\n\tNOTES:\n\n\
        [STRING]='nessecary',\n\t{string}='optional',\n\t(string)='used after the optional string ONLY'.\n\n\
        USAGE:\n\n\
        aniwatch --> watch anime from your list\n\
        aniwatch [NAME OF ANIME] {number of watched ep} (status ex.'completed')  --> Adds Anime to your list\n\n\
        FLAGS:\n\n\
        aniwatch {flag}\n\
        -e | --edit    )    Manually edit your list.\n\
        -l | --list    )    Look at your list, you have shitty taste.\n\
        -a | --all     )    Watch any anime from your list even if\n\
			     flagged as (dropped, completed, etc..)\n\
        -t | --top     )    List of 100 top manga/anime\n\
        -s | --season  )    List of anime in any season any year\n\
        --import       )    Import your 'myanimelist' xml list.\n\
        --download-dir )    Specify a directory to download the episode\n\
			     instead of watching it.\n\
        --rewatch      )    Rewatch the last marked episode.\n\
	--hide-subs    )    Hide the hardcoded subtitles, well, kind of.\n\
			     for japanese learners. (needs screenkey installed)
        -p | --loop    )    Keep watching anime, such a weeb.\n\
        -h | --help    )    What do you think this does.\n\
        info )              Scraps 'my Anime List' for info about anime/manga,\n\
			    it has flags too.\n\n\
        In alternate to the '-t' and '-s' flags, you can use $BOLD aniwatch info$RESET followed by:
        \tYou can always run these without an argument to learn more about the usage.\n\
        \t-t | --top    )   	List of 100 top manga/anime\n\
        \t-s | --season ) 	List of anime in any season any year\n\
        \t-h | --help   )	Help message for the 'info' flag
        "
}

case "$1" in
    -e | --edit ) vim "$myFILE" ; exit ;;
    -l | --list ) myLIST ; exit ;;
    -p | --loop ) loop "$@" ;;
    -t | --top ) myanimelist -t "$@" ; exit ;;
    -s | --season ) myanimelist -s "$@" ; exit ;;
    info ) myanimelist "$@" ; exit ;;
    --import) importMyList "$@" ; exit ;;
    -h | --help ) myHelp ; exit ;;
    *) watchAnime "$@" ;;
esac
